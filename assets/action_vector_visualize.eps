%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.2 (Build 19C57) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 783 608
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 783 608
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
0 0 783 608 rc
0 608 m
783 608 l
783 0 l
0 0 l
0 608 l
h
f
2 w
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 0 608 cm
0 0 m
783 0 l
783 608 l
0 608 l
0 0 l
h
S
Q
0.9999966 1 1 sc
q
151.45015 448.19702 96.383446 96.359528 rc
146.45015 549.55658 m
252.8336 549.55658 l
252.8336 443.19702 l
146.45015 443.19702 l
h
f
Q
q
247.8336 448.19702 96.383446 96.359528 rc
242.8336 549.55658 m
349.21704 549.55658 l
349.21704 443.19702 l
242.8336 443.19702 l
h
f
Q
q
344.21704 448.19702 96.383377 96.359528 rc
339.21704 549.55658 m
445.60043 549.55658 l
445.60043 443.19702 l
339.21704 443.19702 l
h
f
Q
q
440.60043 448.19702 96.383446 96.359528 rc
435.60043 549.55658 m
541.98389 549.55658 l
541.98389 443.19702 l
435.60043 443.19702 l
h
f
Q
q
536.98389 448.19702 96.383446 96.359528 rc
531.98389 549.55658 m
638.36731 549.55658 l
638.36731 443.19702 l
531.98389 443.19702 l
h
f
Q
q
151.45015 351.83743 96.383446 96.359604 rc
146.45015 453.19702 m
252.8336 453.19702 l
252.8336 346.83743 l
146.45015 346.83743 l
h
f
Q
q
247.8336 351.83743 96.383446 96.359604 rc
242.8336 453.19702 m
349.21704 453.19702 l
349.21704 346.83743 l
242.8336 346.83743 l
h
f
Q
q
344.21704 351.83743 96.383377 96.359604 rc
339.21704 453.19702 m
445.60043 453.19702 l
445.60043 346.83743 l
339.21704 346.83743 l
h
f
Q
q
440.60043 351.83743 96.383446 96.359604 rc
435.60043 453.19702 m
541.98389 453.19702 l
541.98389 346.83743 l
435.60043 346.83743 l
h
f
Q
q
536.98389 351.83743 96.383446 96.359604 rc
531.98389 453.19702 m
638.36731 453.19702 l
638.36731 346.83743 l
531.98389 346.83743 l
h
f
Q
q
151.45015 255.47791 96.383446 96.359528 rc
146.45015 356.83743 m
252.8336 356.83743 l
252.8336 250.47791 l
146.45015 250.47791 l
h
f
Q
q
247.8336 255.47791 96.383446 96.359528 rc
242.8336 356.83743 m
349.21704 356.83743 l
349.21704 250.47791 l
242.8336 250.47791 l
h
f
Q
q
344.21704 255.47791 96.383377 96.359528 rc
339.21704 356.83743 m
445.60043 356.83743 l
445.60043 250.47791 l
339.21704 250.47791 l
h
f
Q
q
440.60043 255.47791 96.383446 96.359528 rc
435.60043 356.83743 m
541.98389 356.83743 l
541.98389 250.47791 l
435.60043 250.47791 l
h
f
Q
q
536.98389 255.47791 96.383446 96.359528 rc
531.98389 356.83743 m
638.36731 356.83743 l
638.36731 250.47791 l
531.98389 250.47791 l
h
f
Q
q
151.45015 159.1183 96.383446 96.359604 rc
146.45015 260.47791 m
252.8336 260.47791 l
252.8336 154.1183 l
146.45015 154.1183 l
h
f
Q
q
247.8336 159.1183 96.383446 96.359604 rc
242.8336 260.47791 m
349.21704 260.47791 l
349.21704 154.1183 l
242.8336 154.1183 l
h
f
Q
q
344.21704 159.1183 96.383377 96.359604 rc
339.21704 260.47791 m
445.60043 260.47791 l
445.60043 154.1183 l
339.21704 154.1183 l
h
f
Q
q
440.60043 159.1183 96.383446 96.359604 rc
435.60043 260.47791 m
541.98389 260.47791 l
541.98389 154.1183 l
435.60043 154.1183 l
h
f
Q
q
536.98389 159.1183 96.383446 96.359604 rc
531.98389 260.47791 m
638.36731 260.47791 l
638.36731 154.1183 l
531.98389 154.1183 l
h
f
Q
q
151.45015 62.758785 96.383446 96.35952 rc
146.45015 164.1183 m
252.8336 164.1183 l
252.8336 57.758785 l
146.45015 57.758785 l
h
f
Q
q
247.8336 62.758785 96.383446 96.35952 rc
242.8336 164.1183 m
349.21704 164.1183 l
349.21704 57.758785 l
242.8336 57.758785 l
h
f
Q
q
344.21704 62.758785 96.383377 96.35952 rc
339.21704 164.1183 m
445.60043 164.1183 l
445.60043 57.758785 l
339.21704 57.758785 l
h
f
Q
q
440.60043 62.758785 96.383446 96.35952 rc
435.60043 164.1183 m
541.98389 164.1183 l
541.98389 57.758785 l
435.60043 57.758785 l
h
f
Q
q
536.98389 62.758785 96.383446 96.35952 rc
531.98389 164.1183 m
638.36731 164.1183 l
638.36731 57.758785 l
531.98389 57.758785 l
h
f
Q
11 w
1 0.57770598 0 sc
q
0 0 783 608 rc
1 0 0 -1 247.8336 549 cm
0 0 m
0 100.80296 l
S
0.99954963 0 0.083629929 sc
1 0 0 -1 247.8336 448.19702 cm
0 0 m
0 389.88168 l
S
0.9999966 1 1 sc
1 0 0 -1 344.21704 549 cm
0 0 m
0 100.80296 l
S
0.99954963 0 0.083629929 sc
1 0 0 -1 344.21704 448.19702 cm
0 0 m
0 192.71913 l
S
1 0 0 -1 344.21704 255.47791 cm
0 0 m
0 96.359604 l
S
1 0 0 -1 344.21704 159.1183 cm
0 0 m
0 100.80296 l
S
0.9999966 1 1 sc
1 0 0 -1 440.60043 549 cm
0 0 m
0 100.80296 l
S
0.99954963 0 0.083629929 sc
1 0 0 -1 440.60043 448.19702 cm
0 0 m
0 192.71913 l
S
0.9999966 1 1 sc
1 0 0 -1 440.60043 255.47791 cm
0 0 m
0 96.359604 l
S
1 0 0 -1 440.60043 159.1183 cm
0 0 m
0 100.80296 l
S
1 0 0 -1 536.98389 549 cm
0 0 m
0 100.80296 l
S
0.99954963 0 0.083629929 sc
1 0 0 -1 536.98389 448.19702 cm
0 0 m
0 192.71913 l
S
1 0 0 -1 536.98389 255.47791 cm
0 0 m
0 96.359604 l
S
1 0 0 -1 536.98389 159.1183 cm
0 0 m
0 100.80296 l
S
1 0 0 -1 147 448.19702 cm
0 0 m
490.81747 0 l
S
0.9999966 1 1 sc
1 0 0 -1 147 351.83743 cm
0 0 m
100.8336 0 l
S
1 0.57770598 0 sc
1 0 0 -1 247.8336 351.83743 cm
0 0 m
96.383446 0 l
S
1 0 0 -1 344.21704 351.83743 cm
0 0 m
96.383377 0 l
S
0.9999966 1 1 sc
1 0 0 -1 440.60043 351.83743 cm
0 0 m
96.383446 0 l
S
1 0 0 -1 536.98389 351.83743 cm
0 0 m
100.8336 0 l
S
1 0 0 -1 147 255.47791 cm
0 0 m
100.8336 0 l
S
0.99954963 0 0.083629929 sc
1 0 0 -1 247.8336 255.47791 cm
0 0 m
96.383446 0 l
S
1 0 0 -1 344.21704 255.47791 cm
0 0 m
96.383377 0 l
S
1 0 0 -1 440.60043 255.47791 cm
0 0 m
96.383446 0 l
S
1 0.57770598 0 sc
1 0 0 -1 536.98389 255.47791 cm
0 0 m
100.8336 0 l
S
0.99954963 0 0.083629929 sc
1 0 0 -1 147 159.1183 cm
0 0 m
100.8336 0 l
S
1 0.57770598 0 sc
1 0 0 -1 247.8336 159.1183 cm
0 0 m
96.383446 0 l
S
1 0 0 -1 344.21704 159.1183 cm
0 0 m
96.383377 0 l
S
1 0 0 -1 440.60043 159.1183 cm
0 0 m
96.383446 0 l
S
1 0 0 -1 536.98389 159.1183 cm
0 0 m
100.8336 0 l
S
12 w
0.99954963 0 0.083629929 sc
1 0 0 -1 151.45015 549 cm
0 0 m
0 490.68466 l
S
1 0 0 -1 633.36731 549 cm
0 0 m
0 490.68466 l
S
1 0 0 -1 147 544.55658 cm
0 0 m
490.81747 0 l
S
1 0 0 -1 147 62.758774 cm
0 0 m
490.81747 0 l
S
18 w
2 J
1 0 0 sc
1 0 0 -1 153 542 cm
0.25 0 m
0.25 478 l
S
1 0 0 -1 535 441 cm
0.83333331 0 m
0.83333331 370 l
S
1 0 0 -1 439 441 cm
0.80555558 0 m
0.80555558 181 l
S
1 0 0 -1 248 444 cm
0.20023148 0 m
0.20023148 374 l
S
1 0 0 -1 345 443 cm
0.20023148 0 m
0.20023148 374 l
S
1 0 0 -1 153 62 cm
478 0.81481481 m
0.14838859 0.81481481 l
S
1 0 0 -1 630 542 cm
1.3333334 481.42325 m
1.3333334 0 l
S
1 0 0 -1 153 548 cm
0 0.75 m
478 3 l
S
1 0 0 -1 154 447 cm
0 0 m
476 2 l
S
1 0 0 -1 248 256 cm
0 0.5 m
285 0.5 l
S
Q
0.13333334 0.30588236 1 sc
q
153 523 m
165.70255 523 176 533.29742 176 546 c
176 558.70258 165.70255 569 153 569 c
140.29745 569 130 558.70258 130 546 c
130 533.29742 140.29745 523 153 523 c
h
W*
0 0 783 608 rc
125 574 m
181 574 l
181 518 l
125 518 l
h
f
Q
q
248 523 m
260.70255 523 271 533.29742 271 546 c
271 558.70258 260.70255 569 248 569 c
235.29745 569 225 558.70258 225 546 c
225 533.29742 235.29745 523 248 523 c
h
W*
0 0 783 608 rc
220 574 m
276 574 l
276 518 l
220 518 l
h
f
Q
q
630 523 m
642.70258 523 653 533.29742 653 546 c
653 558.70258 642.70258 569 630 569 c
617.29742 569 607 558.70258 607 546 c
607 533.29742 617.29742 523 630 523 c
h
W*
0 0 783 608 rc
602 574 m
658 574 l
658 518 l
602 518 l
h
f
Q
q
630 424 m
642.70258 424 653 434.29745 653 447 c
653 459.70255 642.70258 470 630 470 c
617.29742 470 607 459.70255 607 447 c
607 434.29745 617.29742 424 630 424 c
h
W*
0 0 783 608 rc
602 475 m
658 475 l
658 419 l
602 419 l
h
f
Q
q
535 421 m
547.70258 421 558 431.29745 558 444 c
558 456.70255 547.70258 467 535 467 c
522.29742 467 512 456.70255 512 444 c
512 431.29745 522.29742 421 535 421 c
h
W*
0 0 783 608 rc
507 472 m
563 472 l
563 416 l
507 416 l
h
f
Q
q
439 421 m
451.70255 421 462 431.29745 462 444 c
462 456.70255 451.70255 467 439 467 c
426.29745 467 416 456.70255 416 444 c
416 431.29745 426.29745 421 439 421 c
h
W*
0 0 783 608 rc
411 472 m
467 472 l
467 416 l
411 416 l
h
f
Q
q
345 421 m
357.70255 421 368 431.29745 368 444 c
368 456.70255 357.70255 467 345 467 c
332.29745 467 322 456.70255 322 444 c
322 431.29745 332.29745 421 345 421 c
h
W*
0 0 783 608 rc
317 472 m
373 472 l
373 416 l
317 416 l
h
f
Q
q
248 420 m
260.70255 420 271 430.29745 271 443 c
271 455.70255 260.70255 466 248 466 c
235.29745 466 225 455.70255 225 443 c
225 430.29745 235.29745 420 248 420 c
h
W*
0 0 783 608 rc
220 471 m
276 471 l
276 415 l
220 415 l
h
f
Q
q
154 421 m
166.70255 421 177 431.29745 177 444 c
177 456.70255 166.70255 467 154 467 c
141.29745 467 131 456.70255 131 444 c
131 431.29745 141.29745 421 154 421 c
h
W*
0 0 783 608 rc
126 472 m
182 472 l
182 416 l
126 416 l
h
f
Q
q
153 136 m
165.70255 136 176 146.29745 176 159 c
176 171.70255 165.70255 182 153 182 c
140.29745 182 130 171.70255 130 159 c
130 146.29745 140.29745 136 153 136 c
h
W*
0 0 783 608 rc
125 187 m
181 187 l
181 131 l
125 131 l
h
f
Q
q
154 41 m
166.70255 41 177 51.297451 177 64 c
177 76.702553 166.70255 87 154 87 c
141.29745 87 131 76.702553 131 64 c
131 51.297451 141.29745 41 154 41 c
h
W*
0 0 783 608 rc
126 92 m
182 92 l
182 36 l
126 36 l
h
f
Q
q
248 41 m
260.70255 41 271 51.297451 271 64 c
271 76.702553 260.70255 87 248 87 c
235.29745 87 225 76.702553 225 64 c
225 51.297451 235.29745 41 248 41 c
h
W*
0 0 783 608 rc
220 92 m
276 92 l
276 36 l
220 36 l
h
f
Q
q
248 136 m
260.70255 136 271 146.29745 271 159 c
271 171.70255 260.70255 182 248 182 c
235.29745 182 225 171.70255 225 159 c
225 146.29745 235.29745 136 248 136 c
h
W*
0 0 783 608 rc
220 187 m
276 187 l
276 131 l
220 131 l
h
f
Q
q
248 232 m
260.70255 232 271 242.29745 271 255 c
271 267.70255 260.70255 278 248 278 c
235.29745 278 225 267.70255 225 255 c
225 242.29745 235.29745 232 248 232 c
h
W*
0 0 783 608 rc
220 283 m
276 283 l
276 227 l
220 227 l
h
f
Q
q
248 327 m
260.70255 327 271 337.29745 271 350 c
271 362.70255 260.70255 373 248 373 c
235.29745 373 225 362.70255 225 350 c
225 337.29745 235.29745 327 248 327 c
h
W*
0 0 783 608 rc
220 378 m
276 378 l
276 322 l
220 322 l
h
f
Q
q
345 327 m
357.70255 327 368 337.29745 368 350 c
368 362.70255 357.70255 373 345 373 c
332.29745 373 322 362.70255 322 350 c
322 337.29745 332.29745 327 345 327 c
h
W*
0 0 783 608 rc
317 378 m
373 378 l
373 322 l
317 322 l
h
f
Q
q
439 327 m
451.70255 327 462 337.29745 462 350 c
462 362.70255 451.70255 373 439 373 c
426.29745 373 416 362.70255 416 350 c
416 337.29745 426.29745 327 439 327 c
h
W*
0 0 783 608 rc
411 378 m
467 378 l
467 322 l
411 322 l
h
f
Q
q
439 233 m
451.70255 233 462 243.29745 462 256 c
462 268.70255 451.70255 279 439 279 c
426.29745 279 416 268.70255 416 256 c
416 243.29745 426.29745 233 439 233 c
h
W*
0 0 783 608 rc
411 284 m
467 284 l
467 228 l
411 228 l
h
f
Q
q
345 233 m
357.70255 233 368 243.29745 368 256 c
368 268.70255 357.70255 279 345 279 c
332.29745 279 322 268.70255 322 256 c
322 243.29745 332.29745 233 345 233 c
h
W*
0 0 783 608 rc
317 284 m
373 284 l
373 228 l
317 228 l
h
f
Q
q
345 136 m
357.70255 136 368 146.29745 368 159 c
368 171.70255 357.70255 182 345 182 c
332.29745 182 322 171.70255 322 159 c
322 146.29745 332.29745 136 345 136 c
h
W*
0 0 783 608 rc
317 187 m
373 187 l
373 131 l
317 131 l
h
f
Q
q
345 41 m
357.70255 41 368 51.297451 368 64 c
368 76.702553 357.70255 87 345 87 c
332.29745 87 322 76.702553 322 64 c
322 51.297451 332.29745 41 345 41 c
h
W*
0 0 783 608 rc
317 92 m
373 92 l
373 36 l
317 36 l
h
f
Q
q
535 41 m
547.70258 41 558 51.297451 558 64 c
558 76.702553 547.70258 87 535 87 c
522.29742 87 512 76.702553 512 64 c
512 51.297451 522.29742 41 535 41 c
h
W*
0 0 783 608 rc
507 92 m
563 92 l
563 36 l
507 36 l
h
f
Q
q
535 136 m
547.70258 136 558 146.29745 558 159 c
558 171.70255 547.70258 182 535 182 c
522.29742 182 512 171.70255 512 159 c
512 146.29745 522.29742 136 535 136 c
h
W*
0 0 783 608 rc
507 187 m
563 187 l
563 131 l
507 131 l
h
f
Q
q
533 232 m
545.70258 232 556 242.29745 556 255 c
556 267.70255 545.70258 278 533 278 c
520.29742 278 510 267.70255 510 255 c
510 242.29745 520.29742 232 533 232 c
h
W*
0 0 783 608 rc
505 283 m
561 283 l
561 227 l
505 227 l
h
f
Q
q
630 233 m
642.70258 233 653 243.29745 653 256 c
653 268.70255 642.70258 279 630 279 c
617.29742 279 607 268.70255 607 256 c
607 243.29745 617.29742 233 630 233 c
h
W*
0 0 783 608 rc
602 284 m
658 284 l
658 228 l
602 228 l
h
f
Q
q
630 136 m
642.70258 136 653 146.29745 653 159 c
653 171.70255 642.70258 182 630 182 c
617.29742 182 607 171.70255 607 159 c
607 146.29745 617.29742 136 630 136 c
h
W*
0 0 783 608 rc
602 187 m
658 187 l
658 131 l
602 131 l
h
f
Q
q
631 39 m
643.70258 39 654 49.297451 654 62 c
654 74.702553 643.70258 85 631 85 c
618.29742 85 608 74.702553 608 62 c
608 49.297451 618.29742 39 631 39 c
h
W*
0 0 783 608 rc
603 90 m
659 90 l
659 34 l
603 34 l
h
f
Q
21 w
2 J
1 0.87788123 0.11010496 sc
q
0 0 783 608 rc
1 0 0 -1 151 443 cm
1.5 0.5 m
1.5 374.5 l
S
1 0.87788123 0.11010496 sc
1 0 0 -1 152 444 cm
0.5 1.5 m
474.5 1.5 l
S
1 0 0 -1 625 544 cm
1.5 0.5 m
1.5 101.5 l
S
ep
end
%%Trailer
%%EOF
