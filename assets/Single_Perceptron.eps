%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.2 (Build 19C57) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1027 489
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1027 489
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HZXGCJ+Apple-Chancery
%!FontType1-1.0: HZXGCJ+Apple-Chancery 1.0000.0.0000
14 dict begin
/FontName /HZXGCJ+Apple-Chancery def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /i put
dup 34 /one put
dup 35 /o put
dup 36 /two put
dup 37 /three put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -2224 1 index div -952 2 index div 3380 3 index div 2289 5 -1 roll div]cvx def
/sfnts [<


00>] def
/CharStrings 8 dict dup begin
/.notdef 0 def
/space 1 def
/one 2 def
/two 3 def
/three 4 def
/i 5 def
/o 6 def
/soliduslongoverlay.cmb 7 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-2224 -952 3380 2289} readonly def
/UniqueID 4452412 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68155B56B41048989884DF1DBD5AE646132032C25386A76AAC3F374AEC1E57D6E4F1A142A34BF9821047CF78747665CC4F25F4E169A13B0CCF42C100CEFB9EC5150476CB30B9705B3DBBE4D3B80D5F4FD02785FC4BD73930423A646D24B1057895D6EAEDB5831E822A8BA63AFA09F3AF37F4642EC6E88822AFFBF16C092A9FB57FE091BC52253F3BB471F7E0197A47205714718E3EB12256B13208D81EAD0AD0EA1596ED28D19DF29F53894940DC0B17E42E2312040691FCB8D99D96E472B0C3A579508EC7F576531AB0210F3A17DEBCE1A8CEF7AED3BD91A4DD5B1B95FF53DA3A3C2DF0CDA68A7CD92E517C1CD1B2E6552BAA386E7E458DA9FAADB4FC0896E4BF636C17030C74B8F0A8E01CC8C1568BA1A63158E4A2669804F50EC6DD2A1AC0DE42B6B5413D6C042F148530958F475295BC332F37C48D8E3A322D9A9C663B8A042CDE2172AD49C0590AEB6D403D7B604E8A6CECF582DAF1F4BE91502FD2C76D73FB56C2A7345F728AC4216E034E23D4896F02088EC0CC274E342DACF0F552DCC0CE2A9CE6E82FA487AB20FAA34069B5664838E137EA26F8332B6BA5D426BBB3406C8BAA07FCCB8C7DE72AD27814AE3B791403E520F1D99A59EBD5D14AACB810F7D2E79EA34F580E0933BE0C273828A8755D50D249071A71953F00579E3C860710BAD69D649F241EB50EB2EAA0F0D66B0BDB12921FD55006707DDDE01F2E18ED402A5EB460FF13607C7CF70A69F4058035D07E860A1F3B991E98A7349C7FC4C2C8F416FD078E016A566C1BA1A24662A4C9100FD2253889744F573E24C295DFD1BB58CF99B
CDD77B06D82C306C3C63CAC62C302EE1B1E7300F78903D60059ECEF70F773E4BBABA61E3524BD456B11AAE8FE16360B9EAE40DA80FE30BBE0BA7FCAF0D660235CAB8EA00986EFF13BF69E6D89687821DBF34DA81C291F03B8C0487472234D88E72BFD120FEACCD41C586C460F359FF4ED80E05DF70AD0C5456A6AD6A06215AD0F280201949AB1AA51EF4C6012777EE5A6387FC99C1330317334FAA61EB8D40D1E16BCCEE9CF96F4CCE439C42ED18231C00A692833332991C5A43600D3F639D295F1CB7036F259846E40CB967E0C41CBFBEF14824D5BB5A4D3F9E840B1369257C193D6A4AA45D2A83DE607A6081291AB6EC2C9779255AE183027991C8725F3483263BAABAE35ADC37DBEE099D6282CE466C1457E2FEDA1A04D1B49A1A3D7F184CC8810D1902DDAD65B53AC8D9A38C638A0A452FEE57175249E86F88517ADB98B22E2D5DE03F8DA13F04CA0AC36D4BF6C7B6A4A57A3F7A5030D582C45B96FC03F3F57D4E95CB0FD35E0AA395194992B149A4EBCFD4221C2AE1B32287B99D101C142B05DB9B6B111CA02E5EF8FEC6D53DBC714634445FCE08C53F4186E11F0D676D46C4BF9949A51DD9444279A5DDADBF2ECE1B20E3763F4AC4CEE6DAC9ECE50D5115F59303E92C6949ABE22153824F6E395A5A536C83CAC86480D2907911BB2E056B0FF52BE1223EE04ACC05F44C771843A9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HZXGCJ+Apple-Chancery cguidfix
/F1.1/HZXGCJ+Apple-Chancery renmfont
%RBIBeginFontSubset: SEJRRF+HiraMinProN-W3
%!FontType1-1.0: AAAAAJ+HiraMinProN-W3 001.003%%CreationDate: 1/28/20% Copyright 2020 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (HiraMinProN-W3) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -75 def/UnderlineThickness 50 defend readonly def/FontName /AAAAAJ+HiraMinProN-W3 def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 0 /uni03BC.1046 putdup 1 /uni03C6.1055 putreadonly def/FontBBox {-349 -297 1165 1229} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEF1B05D6DE4413DDBDB2D936EF6A197BC87EF3384DF04E6025A3A7EFFF451D52E96CD9578B338402FFBD152612101324BC081980B5D4EC444ABE13399B72F62E0A30029C94FA9C2704289F62662372F1CA26593CDBF978BC34394B509DAE2360B9BFC437DBFF22B0F590A8E0D6406B5C2C4AA774ABF6D64DA5F648098DD18CB229BFB565344A8FC198A84BCB493939ABE8FF14E55E655A042C271E9DF7883E5395A69C97FBFBA7B63436790FF06F8F6ED7068343016867A92D72DFA92314EDC97D8586135F80FF47D5DE683F5D2FD94462E425E81293FC1AB217BA73B3CE3853299CC851B12C62127C8C305BB55E9ACD727EDB401B514CEEC8572C87A086B0971572861A54EAD6119DBA90AFABB1EF64DEF0C4C1D3E3E9A1C81117736ECD4FD69C1B2CA42C61A6B5CB23D939009A690811952482039805E53AFABB9D7BEE18638CF8B40851980746F19FF17DD27A688D13B6C5523EFE3ED20EEC2808DA354E83CDAC450FE76BDAD1817E6A2358169764A5F16A117A8D3E8D9FA806095EC07DAF49462AB9929E56B587B959C8044ACD6ED101807413BEDD0EC0159A2871F5F97F45F57902C7EEA6DC2A9798EA5CA77C849E5C6D73E2DDF0A1A8701555351298439AB952EE373D2FCBAF50CFD15F3E0CC89E92B5329A2D7E91D7D2F0EAFE103FD51FC5881E204FE4F0FB735C3B15E6F0E78BF9269AAC643D8CEDB44E6479027B89ADC09DC2D316B01E66DA9C871D7C3CFA5191C5464347D82A94180C29176FF3E1C6F5F1CE6D5093271DCC104C2481053D99D9E32CB16D4190C2B1BB1B29B329222CD50F1F28B7AA64BDE481275274EF48F73021F7691CEE67A13092BFFF1A946D608CE594646DEF455A4DB149B0905446A0F35B192775C16FC88FBAFFE392A18AEADE8B39E87FD5F910EB9C271D961582C7DDF4324F27E19943DB4635D92A83BCA91F88348AD3770EAE8A9260CB482C036E71D69AD97240C58C26EF01B89D7DB80DDE725EBF17BB50A5AA11ADE48068FF2CACCA7EEE33768913BA8AF7FC7C09F93125BDE60AEF347617825C69222E81BB6B0ED2BD34DD4D9C2FAFE13425841672BE0CCABF407EFF8440C221F5953B4ACA631DD37FB5EC6FDCB0B59B424F1403AFBD192FCA4E95E0CA293B0E47BC6374A1C9DAE9160CEE1D4A59C5888A83F3D1E64D9E3450EC8E1690976716D6A18338975F5C4F5F61AF46841EDCA68BDE7378117B60F5E12BF88EE893ED936357BF4CF285488B503380AB8473841510F9D58C2C05CED6BA7A560D637B912D0AE495125A92BC5A7510399AF2F326EF81CA2D5C7A3EB8714B27EDEC686FAF1B85F0F10499D856AD8D1330BA9E097EDE12AD0E1EC1DD4C6ACF332B8C5E7DB493A4923559AC8A4625BB7A3022EFE61C5F83466F6C23DB00AF43B987EF16AAA55F279DDA0281B1B20282C93BCFD19F49AF073E8B19BD0C44952E76EBF928AB366DDD3BBD9A5D5B8B6C4C84AAFF26CFD8BDDCB860A0886DFA33EB70410EC0811B79093B59BCDC2F5FE5D7B83C2746DA1858E12435A4B45BF1B94251D8A1918AF3BA21F6490700B110AAD2EEB8EFB54529375A9B7A08A5ADA4556B49DFD73EDEA9FE0F8E7BBC9E83A6EAC911CA8C281B1F120E3F955B35BB3D825CD6A6F2B4470A58D1E200E4F07D12BC7D71A4BAFF008CE858B1930EB74615AD64412AA750C853A23AF95CA9C55F649107762FCE524055C10B3910D7129A19B7754BC9C69BE3D4F9B9A9B31189FD3AE116C51782DA00D8804EA60A60691C748517F8CCBE598D1905DD232F317315C1CD2DC746F11C0FF11F328BA57A6C93D0B0FBFCB5994F2C3A9F61663F868B5AD7C68FDFB2EB46AFF901C7535D24E0FEFB7D80C5292D7B2CC83477B3AE63F08CF8C481AE7F59CFBA156B63ADB17769D6BE9449E5609CA3A5D8FB5B4F961AA3B1E731ADED8DEE95DE6679A368A15A36EEBC35C36D8382093827BD367DF5FFF60496EADAFB80F3D404D2BAA2C864024612C35B19C30C8053ABB9D7A228788BE51E409F3F31C4175E8C509130307EC263DBFA17BF3356BFD1D009D30D0AAD10D930DE2510648BD16E6304E9C7525AAA08331A66F6BD2F76D1A5FBE729E66007C898A7999ED23217D8A9B0227796EFF27244DA1A5825804B02C5305C24385967BE00FC0B9FEAD906A98100F96D15E0A0B0157314BD5914CC86B01637B846E1F0CCA06DA51C6F65887C9770EC0A496B65EE580FB4A20015B323EBB75853E0FD25DA3371D045F0A324F25AD427CCFEBE9E604F04FBDFD20A46BFAA75C8C77D47E23F41DF28A962993C4A6902EDD3B8841ED4A978AA90273E0A045585381A0CDD3FA99EAE5724FE2344297573E49B196593F3B9BF17F1CEA2D9EB41FB5785EE8403CAAAD3AD34CF7F215B5D92F2EF4736892AB041AD6E1B11CC28E30358C0278609C64AC6062FAD477CBF4D2C908156B9A353C8C93BD7CED35FA0086FDC37887BC58F1D890BC2D1276E22CE222B45C1E345993B120CD4EA46F33A724FCC3AEAF9952EC6F8AB7362B1DF28BB268E35AFE57B11990B3B4A9536AF428FF33D0E7A3C4977177E1810EADA580FCC104D4AFC5C94CA5DE140A8AF37EDBCB5732B0F6BA8E5A668F4663452B1E0586C4F7FDECF692BE7CA2E94FB145E512C8C676E3D052CEB2A6905A4C8488DE7EC6E19C8AEB244089469D9FA127FCE81A3DEEC6121D74DDA79BB0486F639978C2F546040D870C313703378CE9B403B8BC3C2A78271E41371880DE7EAE8707B3E75F4B3FF5BCA0168562E48BD63BBAA823B0DEA79FBA917F326EF3ABFA9A20E57BA735638BDE0DFC92FCD6C375F3E1076A37E497732357E2EB74B0500777133ABD3BAA389452EE230F80528D25A9DA15BB25130A8017395BD1E119194A8D9F130E2DD4EE74F817FF1A374156C52376B728D897D3812B6340A405FD723B4D21163C8941946AEBAA53950F4E3B0ECB96D3D5978D8EE04836D11240FCE1AC43EE0CA8283148A4F24971FCB05B98E0EE3E5031048271C1EBC2AB1F64B58144F3AE5D51437C39FB56DB51CF80809FBD3364F8011027323BE791C068D9C8421EF98674C3D8D594F653C5FE237E99384DD10A148064E4235FA6141B8E4A5CC49013C60B9EE8E2C1A381FE08E9AAC1A8BB02D628CC6D0C1039091C2A7B5C3780D624BFCC65EF090CF8FCBC9C75FF055E166777E933FCBD00B73E7B6CC5BD74C8F4BCCEED8079C008261075AE2D2E9A393109570F726B2DE6C0115C7F38A2FE6351385BE46558762D8FCF4DC75B4F768EDF75250E801F06E4EAE316A7B5B8DB1B7F210AA1E68129F2F20C3A4D3410C6345CDB9204849DD14217FA5049D3B6AFF44661C153688DBE404595E0B1EFACAB41F35FC5E2AAB654CD7B0B70A928985497A3F8B7F4AB2627074E7412C02BF52C05BAE9788611516140A80D2EBFAE248B0768E109326437BBA6BAD12EADECBA4D157904F9ED69405DBA75C0BDC81DE59BC206C7564E20B32E5DE099DF52E22B301AF2233B42AEEE3A078B11A1C44D18CE2E24246325476A3383344508FFB49CA2028726010ADC15CE1D71F01C35ED8BC7EED9286BCAAA47364499C0A2607AE4F43EF05FC477F3827B0475A2140F17ABE10E6C66AA81BDC536F64011B0453F479A24EA04528B8DE61EA670BB24ADCC44E9F2620C7FB7ACA0DD1A09E5B7BB10E72541C226E9D4927E4E650424245D638B3D7A121C9A0CA7A003BF28D71775353E7E258438089D2B1FCC3A999408FC221A92E35C2437D355DC064F888560B4B556F667CA152D8008A754FD65A2C7A9AB436F95D4B063274BDC0FF3E666CEFD2AA0CAA06DC62B6221B87A12C1FFA4A75DEA62CC52B566A6D5F787A1040E97C38927DFF38619C16B0F4C855D7092AFBAD6971B865EE42FAA6F653FBB4CCA1B8A87E85158ED2B76A869E043DC914BA0ED5213C912C3C6F57F1D7299BBF6C82C2CED278C9A6BAE097FE3F6533B5B5823DEF2048E2FBD4EF3D9C437AF497513683D8DEFA805F9BE32A08C41F20392A6A466D91346E0E7066110C31F6D7CC49DC07E7DC640B4FD548F71192BF39B3473CAB36027DBDF6F909B8BC0B1FFEDF33DBDF540626C9117B962BB9FE6DFEB3B7621E006CD738FF2EA2F77CAA93EEBA7B010A0CF66BF624E56835AA69556A877CC5938BC7A666D19252F5973042701DDD08F1FEA7D978B0B451BBE39B207581C9032DB4CCDB63DECDB57A4A97B16DC4394D959C947F88E1575AB8DAC4E7C06EBCCB48B1BA041D40C90F80ABD9E4A4C4E79F36A770384F178D671965501284E82F4E611F46B553F4DAFD3FDE76D8AE115AEAA052137CA79DECE64DAD9A724B355BDDF48005595375D4EA75EB2C790E77A233718F2C6DFE81CD79185B9EBA5A9FC87350B0E28668C0ADEC4557A360A0F54D911178567D4C12C0BCCCF85F60247A230DDC90E4419D3E5B2DFE4B534ED32576EA8AE1B4F07F1B06709DB2D6EDEB6EE7AC72F52F9870787C6159582113D085CCCF09E86194784FCE4B45C8ECD82A115DA2D75AFD30808E210E10BCA0599972C075F9EE19FF5F0A05CC6F4B71A776047E8433809CE7F6A6356FDC47245B59F446789E12108D573EF98E46FDC6498420A432E4F84A4973515907943E8F87CB33D4B4446461576D8F4816C8CDFE69E566179E428E892B31533EA9898C4E8B75B950FBE7C588D6B0CC5DD7D50987FB4733724DA152BF84EEA3EABD79F5E797EDFE1D1F78E0C4663B0D7CEC2D37BBAC32DD2A979ED4DC45143D801B552453F5EABE49F7AEFFCFADBF7F5F717E5DD6D3B2C416104E9CB19FDE3D1A6AB65089DAE07D3B467F63E1F2B15DBEBD9060121FF54E55B79FD152455F25F4275715F310711074D4429A3A496C51312A4F2756719572D96CB40E1209E6BEF3FF84A518D0363C846E80AE9176537AAD74C25B778F4F0BFD79C2BA3D7B90EFBE0F946857C7C5A25ED146D8B0D194AF66FE96316DC7C2F6BD4DED4D0F17E5FB8096CBD388160F4BAD36E1DDEEC5F2ED90350F602DD813DBBCC0E4E8DF8EA4CBFAB9AD08DD2E6D8442F1807C6B204DD6A24BA0EFB4C028B219E590503B4D60B4A0B80E4C08DCDA6C67BFCE7DE073D6556B64178A54EEB4250CA13B7BEDC03892DA319D31099C44E56307FB8F008CBB05C88DA8D42F1E20DB30E6751D6FEA224FFE58D647E2134564DCF43B0B9C4FD30173F5FC8BFF86581FF9C65E343561140059E8D50766B0404D5BCD7A3F13F876361B1147E3E767F7AA5B1B9409F5BB43DC9486C3E47CC67940349ACE015123BCC8737BBDA3F83CA45B36497DF718A575F9ED2E22F8E943F8004232D48E31B6753C6583C750C2E592E128822F8BEF686721FF2FD3B0B80DF858D94FCFE0632BB29707D9587C5B88F4151A046EC45240A1F874BE9B5F0013E0ED950830A06E15B9E0A6524399961F009B049F6AFAEBEE6660394DB6033B760CA29E10381D8C02636E28D8142300B09E05DD8BBF262FA0A7C80A9A4368BC8638D0DDEAFAD410D607ACC90312E5B3005BC87388FD6B4A9B039F79F104D7A6A4872945101731962A38C10F4A966DF7CFB6EB416310869B2A7986E56D9A6DBED603C37C4063D9C29D521255B9ED286BF0F0B1FA229CB33168050403582F868899CD0DD854A9FC16A8F35B7E55357FBE9291C10CD894E35517AA085144BE305F9D0AD24A18FC05D1A2EDCC8E247E9A6C71C890DA800E923CB87B68D00EC5DD685536BA4597237028147E6C3A656AF161B4198CA3DC2B69A51A16A5482330A10EC1FB9FB7DCC805EB9A2A4ED2EF8415BFE559B578F74E742A9FDCB4B5115BD2C4B4D3C6B0C43ACBC642616F2CD161DD1E2AEC7974BE994775C339F605ACF430569D7904DA28764463FF607A8086116F0AC96036F16A74936D40BFA900F57E3F8477011D9E62C69AB7A24074A6972E28A3BBC0A6DDA5A10FDD56F1A9078F594EB3864DA6B6225787712F247EF27B63733BF0B8B58EBF190D8D1927B608005BD8E2B10322070F7CA80E2CE011E2E56387152DA025EFDFCA69E1F5B7DB87E457C1817F8644B0D3229742BBDD0F4978CC2A5447094D03E9AC8191CDC1A5602C8C599038CE942541CC2B51186D79DB747880FEC50381E02F3EA9F6D8EB1A651C0031AD9D7E82B30E6FA43143CC68F862A217CD48601983C41A274131E101F3EE3D5912D1087AF30C613232E3B21771D9599035B2D2036D11955D71B98D1E9934CBB98EFA84562D611B9FD217444860B7BC306E2A988AC1CC9DB97581DD4A77412A90EC28AD3D90ECF8E176861EF4B4303A25079E842472D2BAB2929A6F06999B233FADF80D42D172443DD97ED53A3A42A144F4A47D0CFA4DCE723E2ED8BFC865DAF77AF1689EDE18D25F340EC679034DF499F9EECC267EB2745B8426271321A396B532415318D32900434149468659DBFEE19F4BE727D47BF5617C509C7060A2B290C1CE2A0B8C9EB13D5D648FEC683D134CAF43F663C63A80A7384A234181B4EEB636A1DCDBC9FF080F15E8ACF40472139032E55DDA214C6F6E215F787D3AB584557B9F7AA82E1F893EEF3509DD0F4B0927AFB3E5EFD8426AC0A17997B66B50A26A89C4EF764C9F622A31E3DCC79A4A2299BD77515D73837881D809971FD4279DD20F71D4CEFFB418DFEC6B199555310B68BBCD7AC76AB7E6B2D93E61ABE074B37ED32D756BA91277C7A8CE43E1B5BAF7BC4D712869A888F87263BAA9462C3D42A6E7FD5B5F743E29687089868E8D5AAA38285694F760ADA8B2DA89C12B1C39DAD539BFD3FDA83555CFF6C3981408D5298E3F7800ACC3A73407A487F802A8327464C379ECA89BD37378A4DCABB364AC4BEDB9D4F8BC7CEE52BA7AE6B6C062AFD95DE890A13FE45934C8CE3ED67BBAC69196D57D26651AE903F88369B44CF5450B52B8160893AFE2FFDA58A9435709AD26950D3F30A51B399CE27B6C89E63498602740539DC452E831F98F004709AEF22724A0A2C900D85D303547A0FEF8357DEB88C92CAAEC4E8A2AA298CFEBFFCAFBB8865A01893A80CFBAE9251D713A23EEEEEDD00A5FDF71F5EE2A37C12B791275C16694B8EE324AF294AA1BF6B9B70AE39E97BE0AA1C7D3E4277ABE80CDE376FCFD6B05B584DC10F74E09E6A01018A75807E4E938ED6CFEEB1335C37676D022EDEC2578920D801C3AB21634B4BE5F1E31F21C7C86F2DD1C910464DE03834E953DC77B6FDE8E4AADDD6FC72C614E86A48729B52BBC93AC3ADE4CAEA9605AAD647DE71CE7FB3566C7C3C41A6D1DE856DA3E60DF9A48DA127FA3F02E9CF574E4FB78413E9F2F6D718B64912CD7A1E376098DEAB1ECECDA04E41B53BBAB3824093F16CC4E46101FDE11B0D19305BFFA8C11F061E6933DF7EF7BD4811177620A886C6BC040C838D1E8820390DB8642CE5DF6DF4E547BE8679C84A13C9438D77E67F9747AF93101EA240232635B5712591BBD5B7BBCE0331264AD8DF77E5D6AF728A5C87D38F0353BF50B6FC5CD49DBCAC3EFF340B2DFC163EB119A3728F818EF616408962C26E5682C27C91C38C6CDFEB300A1098E2F4EDC8001ACFC014CA1F7468257305E9934904F193C9CECEA93233934E837C60F898B90E648C0733E58852CBE6D8186AC0285349AF7C9923CC5D1827BFEB7D793CE7EF66D31A130FF4A5755BB55B927023A13E0E81CC9AD285C77EA46EE501D2E0F2964C459F70B7E78202DC49FB43F67C45B0490C9315517C53F63AB01EFBF25B7B15C1B3C1981B40F6B24A8A3AC7538F05DCFE0789576A7D45507E44C03AFBE109882639C114E25F4E4DCADE471031E2F6EF7B642F41F0DE7F1C3A57CF738CDCCFF711BCF3CBF1A0C6B832255826EE01E2EDC39FF4DBC037F5B3AD8259F111B65155FBFBC297FF5B90F91C15743DD2860F931703DB69B94BF25B176BAD4443E2FDDDE2AC42D5ADCAA101DAA6BE7057FFC328C720D14F1CCAC1D41B43ED79FF10136EB44A8DE87DA279FF7D2A085CB865EED1AE5BC4257933F986FA50999A6B7848C1A034AA3A1C5FD2579FF1C2EE54AD10A44C69DD24784A291962339E327CEE1896301FBA179CA3F083CF740B337AF0037AC10849586555CFBB988BD037BAFBC79F33E07333544617B5630FD98C57D5D66EBF921E5729ECC70FBEE8A46100B973D54059FF8FF5C4B73AFD6353A9312535E5FCCA8490118DF86BFB3CAB656E55357D8092043F2F0A91D8C808E200D1316189B4D63AE6E35E57047B2DD6980ACBE6812B72E89C1C3C9D25E6F86C4640222DC39CC07F5300CB2DD247E5FE4A055C1CE4F3F6A0B02A8169130BF7CECD646917ECD8AC1357DDC5F3E85C5ABCA9247947C697244078FD0D25C5010B3215F42DDB2A53DF95BCCB658FA833D84087B250B0F5DC7A8D368C49B45E9CE6D7E130DC61E7F798FF3020E763A344D7E0C33B14B2006E645B4D5889C9730D62C6E6FC84B4262E2856DEE398F2F748B10C9A5CE6C15CB80C0A60484E07AD9E5020572EF43CB7DFEA154909DDCF6EF11121AF6E571F9BC3199CEEFF89830E6AA407831EE3BD0B3691F47FF9119F9D3916F1ECBD77FD3DAF004A5521B1BEFBBF697205C5F102CDD60EF9CCB38954E1F2DAF0CF54822ECFC6D7197630A59973BD4F3231E9ACAFB43E35DDD7681ECE7148C5B220D94FC2A64BD1F1DFF8AFFD0659614B39563701D8E790F229A70A31E33985CA860877462ED1A19D2073568609E6139A112DABA5A865A164180C30D8602F138B302896C3C55F7B328A2FBF2C45F1C4987463E530F1660C38D38AD2125C756CF6310CB9492322DC5E96A454D1DB6D641EBD7193F90BC0CB3045FFDE5EC403C785FCF109958239BCF3AB3591D6D9ADE2286ACE8F6ADD613DBC1FD95A8CED1700E4A015EEA80CA3BC80A61DA67279E7E999092B78E42D7757081D304D5220BDFEC3F98ABA8BFC85A542AE1F7BAA5BF70CB942D81052EE931FDEBE6C6D12C890F23DA9E52E5E4FBB51233062C784EC56218BD5A8119F4CD1AD1EFAC5D4A747F66D00DD360192A6DC0DAC45E3AF456747436C5A2099AF8B72C1B0FB4766683CB4109B6855500935F67D2FD2807AC85717D66853EAD528BA8A29843A67FBBC89DCBB591A0DE82D4D9A04A62351AD99D358591C6E1BE29B4CA8F25450B49E3554ADB6769C4F017DB95C0901C1A3F7565281AD8D9A442D85E4F2D1F9332AC1B7F63AE242A193350E74C3368B177C21A8B780804A595E5FEC5DD54D8005B3C7BF015C88F3FFFBCBDE631F737162116186C66EF6CDECF13FF240A0E57726ECF32A97E19A74272EB5E7874867600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType1-1.0: AAAAAK+HiraMinProN-W3 001.003%%CreationDate: 1/28/20% Copyright 2020 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (HiraMinProN-W3) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -75 def/UnderlineThickness 50 defend readonly def/FontName /AAAAAK+HiraMinProN-W3 def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} forreadonly def/FontBBox {-349 -297 1165 1229} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEF1B05D6DE4413DDBDB2D936EF6A197BC87EF3384DF04E6025A3A7EFFF451D52E96CD9578B338402FFBD152612101324BC081980B5D4EC444ABE13399B72F62E0A30029C94FA9C2704289F62662372F1CA26593CDBF978BC34394B509DAE2360B9BFC437D5DC11F0CC041035FFA2C0FEFF0B6148D5F4FFCB3437D750F49700CC1CF89114E52D47889D1CDA7314EAB1CE4F752D231AE97AF555D77321402BD906B773150BE594D3F1D45A8ED4809649A3B67FBDA6562FFBBF83E264D5EBBF2AC8B6B1E541803B8848D7048775A7E0729B74BF4FC4BE786E6A7B718AC69933ABC4F90EDDDEF2F4E47E7FBB49F300B13C9EB10B69457AE61B6CDDF2F04C9B6D0A02F36E643D3F0FC15A274FF11739DD8369DE6525F68239BDA5B95D7A241B2A613514725D5C8602162D635A547BCF489391BEB22C40AD70C4E2CA35C3BC92ED30B4BD6EFA051F6E416F80DA8CF3D8729771B1EE02259D43D784F5EC31CD57C68171ED9A054CF559249426AB796B65C91216C167BF4F32503979273F98D6F21C884284BA86C55E2E89A6E5F341ACCAAF4C31E185F40D195B742F4065756499805BFAD6EDD97694F829BB6DC84CA9DE26FF5EA9FE47326513041BFB7AC19D600266552BFF39E08C14B8F1CABDA35C9D74EBF8A3766C7AA0A533A44D094C5FBCBE37789DD039B062CAF485C8B4BAE15CCAF2FA5BF60FDC2B100D60C68692174E6515AE1567F98C20BE3EDC5A1634111E752C93D6BAFFEA33F72A817A7311C2125321A545D5949C5E4C629E5DC8A78AA606CD38C0548073A91F10ACE90D97BD0F10CFCCB1FC74E496B307B667E9D27143EFBF8789C0DAF4CF069D4A8FA9430B3FCD125F54A0724C1A0C4D2F217F5E671432882A161CFB29D0CBB4149E9DCE7E58AD7F00A9812379AF01EDCF771C8B809670B84E29E532BEED73BF99323822EA1C13FDC0B2A7870FE035E30CDDBC8CD126F3409F487BCAE8E057FF0DF94B47514867962334FA8FE9A9730B9DD6B4664C21825BAF3A575E65DB02E51DEE31479C754F82AAC57843632C713386F54FFE7BDCC97C330B107C2B4C4783E3249882CFA051C098564B43BA1FC21173364B697C344CC510EFB9980DD5BD9627762095B514943B0EA04CC87E063B723CAA58114CF446DBA94E1A2E389D5543B3C3CB34E4F2A5BEE1C8CE0DCF2865D3F8658DECBDDB841333141CC4F1FF6310645F7E84685FEA73AE10DDC08D50DF1AC7411DC6C24454E652BCCEDFF0AF36D6780ADD78F9C03660340C5D7F225F7EA0D193AAF2EBC6D0A00ECF746CAF6121985D62A0149A8141896DFB360A84494A59B64E4D3B494369EB1B2A539468948FF028298170DD8CD86D4D0FFE8C78BC8853A076678841B388DC23AADA9BFD8D34990E7EB505AD70461B42F6BC95A50CF78BF637E66F9114DE42197AF46180FD7C91823E4A9F04158D4A5396BFDC573BF7B836924BAF67BF8E984EF3DB735DF694E432511E96BDE81B2C3C76CBB6D8ED5892729F2ED8B2DC9CE62DBC858139E19BB1C87903B2937A1A54D3B9FA2410D3AB37F651A09EF60926582CA8B336F50252F24EEF6302528AD7B67A5017043D68E2831ECF77542623049023A32FB735A346D4408DD2FE0CE98B6B355E5E5AC8DF61B3906E2C7A80FE37F980A48EC3443D33068F12FCBE4771B1A6AA51EE2E25C517479F1EE4082ECE205C5D42553602ADDBE3C488E2851EFF6D2CD348B2127DC80937561B2C0D542F49F5F786BA9BF90701A1ED0F470A4346BCD9DA22C005A8EEA8025165AF2F4B409B42673984D65DDB509FD3EE6DF508D77A04AA244D2521F8C070D2443ABE0E10A02269067C0BA07AC1BF2B14B1E81E9D6AC411282E593627E5547486A99B0B1182083264961D299317402CEB7CE6E1EE7334F95AB79E6D4B0D875E5A71BA3A435D4AD803BB2F2C0F5C3A86629D0C9CF0DBC19D8B9DDC566F574A0F8BBBBF64BB35A1DD8F271DCE4E06D03DAA49D5D2DADF5084753BA6CF296DAFF20DD45B986E7751ECAAAC3A796EDEA4F45C8465A135B7D7BF66C0768CB79814D9858EA470409CA08F65CFEFB6EA26D0D6007227A375872A51C4EF4A8816073A4E03AFE215B86FDFB847728DF5A6C72F1E7C5F43184D1D2F3AB066607B1C65019761733E2DCC7BAC38D0D1C80E83E607AD7D6D3994983A16E2D0139769813FE2CFDD034C0040FAEFF195866862631D8777917FB79ADEFCE797E3CD25BF3AFAFE8C6DE2372CF63A52F1F6A160F131331EFF295AE2B86CC09147B92BBA7DCF8817879E858B5FBA6CF0B559900FF21D99CE4339A5FA3AE94060BAB911AE77E2C8C2C868BB50703BBE9A297753F4C56DDE3907D61C4E425273287E2CFC8312FACA34E8D13FA6812A3F96C46C5F2C7E8CBBE2A3116C51F37D0080B27B6BB7ACA052D09CDF967BD24BE1201375AB5E932D27C0D1C9BB71CA68BA740944C66D3380F78F1659B5011BD226387764314672A5E2BEE1B9D270BD3C7DA975EBF5BBA546F8C17A30A999B797FEC10083E212C4E9B480064D946D0D20181749C64E827C843E54F33C0CC9074B9DF2A631D5B43AEA36167211A2942EAC214BF52F33EB3038F695BF07149D44B3555A1D159C2D7E3CEF5FDF36BB80B2FED73DF70940F2B374EB1DEDA00F77CD0FFE028DE8795D6C9EAAE5D5833FC478C0273450A017DBBFC6145059DA6EF36F20F70B732B2D93B30D94E59BA90DCB7EA7E9F9DA04B5536DE353300653AE53F13E3D4145AB14B630116D3ACBC5926F01AB31B8D6C7061CD9FABA9DFE785BD2D6635678113B990C1735BE8C8B230F046E11492282295C39202C54D9BD9C29BBC7860E33AD4AF0711BBFF016DBFC284907430A488343A1413A3E37DD5FF4F2EB3CD0DDF65CAE09131C7F15EE26A78E9A5DFAB72C519F8C32804B8FF7D86D63F7EAC0D7290FF4BA53CD09E467653C0F82B5485E43B72D7F235DD8F5F5D1C418D72070AB469AC9E95D594B86B6E6B05C37A15D34C62518476E6D71B79316EDE33E094177817883B18303FD1A07C33D0820115DD143045B3C4A6D8DE20EF6E4B2CCF85E868961FC0F7D53CE221E9910A28601A2CE30CB19A3362A44C174136341F7D5BA2EB3903ED2CA91188E954A2FDBA3EB0DAB8501BEC993A79375E389CCB047F7710A9F7B2869E4C9CFB60F107044E153A7B7AA5DC56C2C4F2676F92EE0FDD34819DDD1CB36211890BD2D107E05987508BECE8B3C41B9F8498798C97E01C610C1414070F963A5303F84AE9FD6174C89BC15511EF937CCD0BFA8110B36CE43C82131F623990B6DCE27ECC62B67D1179698D9D64BE468322CA41CBF2728C23A6467CD36BA77E402FF2BC87BE7C8FE80999261A36FBE1D418AE4E51BFEE28C273BA27C2594C5F2F4B86A40B96AD89C97F5A16B8036DC86D245ED5A1A90220E12601C2013EDEFAAE29ADB7FB2EC840DABDE1F5AF42F1224E3A30E17C940D03471C30570B6393B2BFA606FBE3A05B8C4E5299C165899E0B120F816F45018C653E7E38A82C53F3066FC21B15B12185299EA60731002FD276F9D8B404BDFD517E1443EC8C4588D9D56D2682B79FC04F58549AE6467E8928017EC74E91C4C0ACAB00D3ED843D8AA1726CF84E20205277D6D9FCEBD65CDA43DCF2BC079CFF8F19BEA055C7088EFB854D5E8807C9A52B790225F1A3A7597575C22CAB7DB4063C4D7E121DDCE89F9FE0F744307BD1297F4D09562D3C09F5EE9140BC557C446836FCB13304C42E582935E7899849625AD06659BBC93C43B6F775D07F3DC54ADBA5DE4ED2C002D007FCDBCE6B837BF9012458727AD462AF5EC5D53EE1A994F13354A7D5561B9E0F948A5AAB298933BE9FAE6205D7F4DCFDD237AF4E1BAF481CDF06BA5248A4D2196EB08354C0C6686A102FE1506A77EEB8AECB85A740DD68EFCE844B0677F74C7AB98F9BF908D50E059F6CD70A9BA7A38E4A059FA8544311325FDA41D181AD3AB075B452977C933C1C2FA8E6306D9787A0ABEFEF6985E81C25FE849CEF58D5133A0B2BEE4E88CFA95E72047E620646175CEB75438A43C8269F14AE22D9684A279339C995C591AD538887B54E13EE2E6B9CBD27A09BF694C211D91B0906EDA18FCC4CEA21DDCF7C34A72760CAC7E704C0638B3E25067B9008FCD6C6659B9480CF3BFE33024406B849FF365F3E874D6D5C628A74B7DF686AD41496CFDC9968D2E345B74702034A843D6328F7617DDCE2FA7E92338D635A7379D39FCF0BC9DA69FB98E778C9B30AB0BC398805FA24B25E22D776D83CA74A284994178E1D3E4E6BCADEB035A22BBAF4C9D6A03061FDE8FD224A961F33823B69A42C8E24EA9298FFD9459E54306DC862FEB5AF605806F80353F408C57F1E658B2674C2988A976EB8D9DCB8457FED4DA1A26BCF699398DD44CCABB84F8107321FE3177DDAEA41CBE7E20A0CD064FCD17B4759F8CBAD2AC18E5B350392DD33140D6287A8EF3A3F13E46AD91CA3645B0FD6F0E738CFC4FFDB6147D67F5A386E8E402D1786FA93CD6301CE5F5506996B29D194F91D325E2A94A2041585D19D220EFB085AA00F23D756349461CF10384E06DD9F5A330C0CC607275FB4776D4E8AD961398139FDD4BFE00D663FC6B7B790D98D070CC13B10B0883DBC585DDF9167FED6DC2181F3CD08D27424E0C0D709D19FFCF189D9BB9701818284A96E6BEB53F72A2C1CA51E80325CC5BAC4F1D7FE8FCF27DCB0E465F96BE420F821DBE53417C03AA9500C14CB95E8316B7E5C92F881B4A6A1492C5680CBFE8683F580715E5D9F9E6F0809CD9DC66736FB82AAEA9A20F8CFCA45874E9637DE67EE4EA4F6B15CA3CFDF89A7C99A57D8AF3E397F07CDB664C64733714ED779A634E1F56589EDB68C30758CBD78E0B8CE5064F5F38E49AE6E34E7287128B11331FB1297BFBBBDD428783793826CE7C7908F008CE9C25A3F3422FDCD48294A10E7B5567D631CCF0F1EDE17A4213D9532DE4DD22F4C86907EACEE06C63CD7752D01B2EA93B22280A807FCEA9507D8B7D838FEEA5E3C2994F57AD6EC9055D4B7A062850495B1EEF0561F3F71CC2A7FA800EC188FC72E738F319EAAECBC00BAACF609637AEA3DC2BF408E18BFF8F54F3BDAA8708A2785BD2D6602BFEE8A7FF446253A36026D45F0053F8241297544DED7EFA421EE5CC38011BFE714602A06E7D02301364EAEA70F419AFFFC73E06DFB121B55847C02122E3D97614AC7BB0A3B0745CD74940BE098AEBE4131028F4E4687816FCD3F921B571FB3C20B4709A4A3BE0EB3A0E0F9ECB9550532FD25655ADD2F42A8C9405041D21B36E1665496ED502F7F2DBA509B910A3E9B78568A7793203F2369A835D099238D1A1CF24B7FEAA3549E4636A261429F17BEC29181B56F28541CEEC5AA7FFD6AC66383DDA5B1354685FD54E05BD2EEF94081FF7785ED68CBCCA1E177F3D97B21341BDF73C0B39F3DFF95B78965D63AA6E75DFC72C5DC1C68DCF9EDA8882A6323CD2CFB6A6814C78966DE7FE44D0E9E85C92D3BD074ECBCCAE6D33DC3B517097ED2A2EE1CEE37EE7470777E66DB2587BED42E4119B88650C27CF52067D415EA69BD8BBED5DF7A936AD8A330210B555336A3C86BB3D1511C0AA92C214DF55DF577EF7D9096411ED0EDA58E12A92A2CC19300592AA184A3FC05829A87A24FCD70C763EEE349A19EDC13C4A957D61D2597211E11FD61E901F66B7D83238ABAAC24954EA8317BCAC55B2503B39670E4D2749FDFF887D3D3DC444A01D909A17E41BC1C161ABEC1C6DBD5EFD39BC503EFEAFC855FAD4656ED3EFF60DBE132AB7CA56C39D84D2F8CE36C93E9599C454A8C19CB3F8ACF8DBC32A539106CA83C97DBD68A9726BBE705E84709C2C23B55C17CE3F4932B7E81D584EAFE713E87CEC3B6F35495452077A18AFA98B674EF7B7BD5026DD3F6995EEAE2CB433D41F368A4F778300647C01B45B585DD8E2F61279E88B601635F30386180F82E0EE98804B7DE793EA10905C7501E755AF65990EB035780C271F80333416DDD63C96E8F6097720A19674C191AD0CB469B0272D1F427B1F09D0B5E51E8B7F2BE2C5DC0F07CE364E373B848F2A3AAD7D3AC87FBC3485EC257A50727A326CC4BF0C754EECD70D082675B3BB43865DEDE64032B49FB198C400D8CA05CF32870D3434EC1A38F25549BDE36351D9F88EE31D79F9236173A3665780B612EFA3EF946944380C95E787AD191D61404BC0F40B06CE63AA70F3CFE4B41F42183B2DA5F48E78D9D4AC67C0F8F067666F47E05BC59622A77783C39145AB3CD29DCC16695F3F105F734612DF6ED99DABDC1DACC935C75001E193DFB645B56BC15B307123FD24C9C17D6A8C3425EE69417D52FB9F5BA1F33111DCE2A9A19B868EAF2535ACF9D51421F8350189FDEB6656B4A6754A0D07096F4E53D01C1DE8301DD198EAA15D8BA0B19ECF560D64FD86C3E60B6A222C67E9023EBA47825B7BB3FB07EDA1B17BA3B999759C5F2926B2DED3E334A019B9EDDA0E7E47DECA48527EDEBC275FCCD7BA49563E90969074DB48378C117F4358A820F21B96CF8D5F3DB26CF9C3EB104A94F85B3C4616095FED70B6C568384498046A857150F65A4967939BF0F6546FB84A17BAEA4564B081967664A070297D8BC957FBFD861713A82C2C6DDAC38142C2D991EBBD8BA496050C76F9AB7AC4926C86822ADA8CD0C3B653821ADAE6BCA94A1A8B874E18412DE1893FB8A492CD9D463550FEA9F81DD043FD4D864CB9E37F4EF3489D6CADED61E707310CBC1A4BC73827C7EEFC9D2F08338D9682226CDB254A88D878C1869C23217C8ED484C16DFA64AFC59746072B70FCF7CCFC6CA8294389E3DD1D8C4FC2CAE0FE89BD3BC292C88CB723D870E890CCED111EFF7221D71B5218CC77309170C4236764BA72343F9296A80A38C8801C5F2E6122F4FD1EBC93CCDEDD1EF145D14696FC09F6AFBED4844F687763192898486518C1C101CC3792CBFE465440A02F1EA54F46444892B1A5988D41694845462D3EBDEE9ACF35010F749C6310AE201060A451A5B29AB9C026BB31A5D9732EB78B3666F14C2E6CC060B194B128B94B5AC4F8349B8DBF6133275E47EC0284FE3EE1D04DE6322BDA46EB8D77AE38CD98E22E0825E1972535ABB010764BAE425EF5F2DAF426F20C0D3665A09C55D65F681E4A312BA5C9BAB1F0D94493AA41FFDB2C9473C4015AB4709D096D44F70B2C3515F31FBEDF922508FD9A61E9E4977649D30B29AD21CD68B72FF63BDA0CA10FBFFF629953AFFC75A00C55D96C4F02518DC762C60AF708C452592B555C38659BAB55B438615BB31132A14DFB91639AFCE60511BC3FD9F5D0BD5C6703CD4C65058165E2267A5F833E7DAFB2287DEC76A39197FEBD291F6F33057A2C9D2A768B048F4F78CB7A4C09C635763CA33E8994A2473C4C8FF476857AC8BF13CFD0988D149EA384844C6A8A33A06F4B70E41FD9F9AB294E5441E29FB6AB3DFB75849355982FEABA1D9FE9BA70020871DD84330851E108DEA33A9027D6A6A7E9DC39E985A0C47F0931DAD420FF5EDFE51F50F9F8CB6DDC2418F22E2C7E8B73532644AE6DD2303BAEB55C581E14C33C7BAE8DB4A692784071902183661D580121922DF986AD74CAEF7C4A52BC9C8358729EEA77873B301CAB0E9AFB60E09F4F11B8F5F66766621A9ECB7D964B20C2D7F61D766A4FC1831622C2F720FE0DAC99DA7581569CB4446A3B62FE528CB4202C90DB2DE3E504E8FE8D7C917F9514D3E4C436C91EE1829240D4079D9A1054401154B1C341B4C3A53ECDA9F7D2DD3B2CC71E8F05D3C5C803CF53DAC8C3B9DA5E83F9E1339D3D880F977D17BC97FF4078106B13D85F321C7A1D2DF416CE84A4B27EDFFF5BF235070833467481E458BD2026909AFBB1B413A4CA09BA04FA9008EEF8222BC4711E1249DB7209C09DF3C0599AB8C8E96F60795B4D29205681A2C55BA8AEA0523C6D6C07A621E39F13927AFF72888FC47832CD5EA975540364F81BABC9E046AE68CC9AE9344B1D65C827C45923F739BFE24B1C4F7EAFD43DBADA5F6711BD4618DE1E3BD5243A27FF79F6F5EE718D4A499D90EDC8216C1A998DEDEE23388EF86BD5CBD90AAAE5FE00DFC26D828FDF35F6816D12B84ED1771D54F00CC26348F982E783FC84E69B6F0230A36F8E1561CE8EB19E0752A81F5C0F0C4A5CD008FA4F9DB53A89A7A689098CD4C026A95D67F6A452EE14BC1AAE739FAA06481F63871F891CE544DE5FBF7149E2BB0EA10B6401279819DB6AFD4FCC9974DB309F93640C7CD21A18D0391A7ADF39C84C32BC81A6BD6E846DD3AB0AB24262FA78EC0918B002A45D735B0FFA49D9DD22731A84AE5CE4145D2E932CD32D6AEC688F02272A0B93D346112D73747F03E9E5693935B5A013B04DEED4D7F18D28471BD8F7354DB768BD615D88B7190A29A17FDA512A78219B4BE8972B932D95FBEA95174E8A1B2E44882608AC0D3E2AF928A1FFDD63C66A993BF9940D035B93E8D8D91D689DC638B762295858229B7CA950829BEAAC74F6A8F0B0EC78840388A278B09CC08F57810CFADB6E510020F5C206F66CA812DCE3DB8E95B299F2B3B0197D4D3E0B9228001052A0E5B6298EFB9D544780D75EF062C47AA5D50DCEE852BF94BAB0AEAEF2CC00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: SEJRRF+HiraMinProN-W319 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Japan1/) def/Supplement 7 defend readonly def/FontName /SEJRRF+HiraMinProN-W3 def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /uni03C6.1055 putdup 34 /uni03BC.1046 putreadonly def/$SubFontArray [/AAAAAJ+HiraMinProN-W3 findfont /AAAAAK+HiraMinProN-W3 findfont ] def/CharProcs 4 dictdup /uniFFFD.0 {(\000) 1 $SP} 2 index /.notdef 2 index put putdup /uni03BC.1046 {(\000) 0 $SP} putdup /uni03C6.1055 {(\001) 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/SEJRRF+HiraMinProN-W3 cguidfix
/F2.1/SEJRRF+HiraMinProN-W3 renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
3 w
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 1027 489 rc
1 0 0 -1 2 487 cm
50.5 101 m
78.390381 101 101 78.390381 101 50.5 c
101 22.609621 78.390381 0 50.5 0 c
22.609621 0 0 22.609621 0 50.5 c
0 78.390381 22.609621 101 50.5 101 c
h
S
1 0 0 -1 2 295 cm
50.5 101 m
78.390381 101 101 78.390381 101 50.5 c
101 22.609621 78.390381 0 50.5 0 c
22.609621 0 0 22.609621 0 50.5 c
0 78.390381 22.609621 101 50.5 101 c
h
S
1 0 0 -1 2 103 cm
50.5 101 m
78.390381 101 101 78.390381 101 50.5 c
101 22.609621 78.390381 0 50.5 0 c
22.609621 0 0 22.609621 0 50.5 c
0 78.390381 22.609621 101 50.5 101 c
h
S
1 0 0 -1 470 295 cm
50.5 101 m
78.390381 101 101 78.390381 101 50.5 c
101 22.609621 78.390381 0 50.5 0 c
22.609621 0 0 22.609621 0 50.5 c
0 78.390381 22.609621 101 50.5 101 c
h
S
Q
q
454 264 m
437.87497 285.44724 l
427.16721 263.96832 l
454 264 l
h
114.10769 431.21008 m
433.53952 271.9653 l
435.32944 271.073 l
437.11407 274.6528 l
435.32416 275.54514 l
115.89231 434.78992 l
114.1024 435.68222 l
112.31778 432.10242 l
114.10769 431.21008 l
h
W
0 0 1027 489 rc
107.31778 440.68222 m
459 440.68222 l
459 258.96832 l
107.31778 258.96832 l
h
f
Q
q
462 246 m
438 258 l
438 234 l
462 246 l
h
120 244 m
440 244 l
442 244 l
442 248 l
440 248 l
120 248 l
118 248 l
118 244 l
120 244 l
h
W
0 0 1027 489 rc
113 263 m
467 263 l
467 229 l
113 229 l
h
f
Q
q
713 243.75 m
689 255.75 l
689 231.75 l
713 243.75 l
h
587 241.75 m
691 241.75 l
693 241.75 l
693 245.75 l
691 245.75 l
587 245.75 l
585 245.75 l
585 241.75 l
587 241.75 l
h
W
0 0 1027 489 rc
580 260.75 m
718 260.75 l
718 226.75 l
580 226.75 l
h
f
Q
q
988 243.79167 m
964 255.79167 l
964 231.79167 l
988 243.79167 l
h
862 241.79167 m
966 241.79167 l
968 241.79167 l
968 245.79167 l
966 245.79167 l
862 245.79167 l
860 245.79167 l
860 241.79167 l
862 241.79167 l
h
W
0 0 1027 489 rc
855 260.79166 m
993 260.79166 l
993 226.79167 l
855 226.79167 l
h
f
Q
q
459 229 m
432.16934 228.65997 l
443.17361 207.33145 l
459 229 l
h
114.91702 49.222622 m
440.46518 217.1866 l
442.24255 218.10362 l
440.40851 221.65837 l
438.63113 220.74135 l
113.08298 52.777378 l
111.3056 51.860352 l
113.13965 48.305599 l
114.91702 49.222622 l
h
W
0 0 1027 489 rc
106.3056 234 m
464 234 l
464 43.305599 l
106.3056 43.305599 l
h
f
Q
q
0 0 1027 489 rc
1 0 0 -1 37 470 cm
/F1.1[ 40 0 0 -40 0 0]sf
0.167053 45 m
(!")[ 13.137635 0.000000 ] xS
1 0 0 -1 1009 279 cm
0.27493274 45 m
(#)s
1 0 0 -1 34.5 280 cm
0.10845925 45 m
(!$)[ 13.137635 0.000000 ] xS
1 0 0 -1 34 90 cm
0.061584249 45 m
(!%)[ 13.137635 0.000000 ] xS
1 0 0 -1 500 269 cm
/F2.1[ 40 0 0 -40 0 0]sf
0.34915149 35 m
(!)s
1 0 0 -1 734 298 cm
50.5 101 m
78.390381 101 101 78.390381 101 50.5 c
101 22.609621 78.390381 0 50.5 0 c
22.609621 0 0 22.609621 0 50.5 c
0 78.390381 22.609621 101 50.5 101 c
h
S
1 0 0 -1 764 272 cm
0.34915149 35 m
(")s
ep
end
